<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

	<!-- 读取配置文件 -->
	<util:properties id="jdbc" location="classpath:config/jdbc.properties"/> 
	
	<!-- 配置数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"> 
		<property name="driverClass" value="#{jdbc.driver}"/>
		<property name="jdbcUrl" value="#{jdbc.url}"/>
		<property name="user" value="#{jdbc.user}"/>
		<property name="password" value="#{jdbc.password}"/>
		<!-- <property name="maxActive" value="#{jdbc.maxActive}"/> -->
	</bean>

		<!-- 配置MyBatis的 SessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource"  ref="dataSource"/>
		<property name="mapperLocations" value="classpath:mapper/*.xml"/>
	</bean>




	<!-- Mapper接口组件扫描 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.chen.dao"/>
	</bean>
	
	 <!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
    </bean>
	-->
	
	
	<!-- 使用Spring的事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 设置 注解驱动的事务管理  -->
	<tx:annotation-driven  transaction-manager="transactionManager"/>

	<!-- 组件扫描 -->
	<context:component-scan base-package="com.chen"/>
	
	
	<!-- 配置MVC注解扫描  使用mvc:annotation-driver代替上边注解映射器和注解适配器配置 mvc:annotation-driver默认加载很多的参数绑定方法, 
		比如json转换解析器被默认加载了,如果使用mvc:annotation-driver不用配置上边RequestMappingHandlerMapping,RequestMappingHandlerAdapter 
		实际开发时使用mvc:annotation-driven conversion-service：自定义参数绑定的注入 -->
	<mvc:annotation-driven/>
	
	
	<!-- 视图解析器 解析jsp解析，默认使用jstl标签 ,classpath下的有jstl的包 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置jsp路径的前缀 -->
		<property name="prefix" value="/page/" />
		<!-- 配置jsp路径的后缀 -->
		<property name="suffix" value=".html" />
	</bean>


	<!-- 自定义参数绑定 -->
	<!-- 
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		转换器
		<property name="converters">
			日期类型转换
			<bean class="com.wffanshao.controller.converter.CustomDateConverter"></bean>
		</property>
	</bean> 
	-->
 
	
	<!-- 
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		校验器，使用hibernate校验器
		<property name="providerClass"
			value="org.hibernate.validator.HibernateValidator" />
		指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下面的ValidationMessages.properties文件
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	-->
	
	<!-- 
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		资源文件名
		<property name="basenames">
			<list>
				<value>classpath:CustomValidationMessage</value>
			</list>
		</property>
		资源文件编码格式
		<property name="defaultEncoding" value="utf-8" />
		对资源文件内容缓存时间，单位秒
		<property name="cacheSeconds" value="120" />
	</bean> -->
	
	<!-- 全局异常处理器 只要实现HandlerExceptionResolver接口就是全局异常处理器 -->
	<!-- 
	<bean class="com.wffanshao.exception.CustomExceptionResolver"></bean>
 	-->
 	
	<!-- 上传文件 -->
	<!-- 
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		最大文件大小，设置上传文件的最大尺寸为5M，-1为不限制大小,
		<property name="maxUploadSize" >
			<value>5242880</value>
		</property>
	</bean> 
	-->
	
	<!-- 拦截器 -->
	<!-- 
	<mvc:interceptors>  
	多个拦截器，顺序执行
		<mvc:interceptor>  
	        <mvc:mapping path="/**" />  
	        <bean class="com.wffanshao.interceptor.LoginInterceptor"/>  
	    </mvc:interceptor>
	    <mvc:interceptor>  
	        <mvc:mapping path="/**" />  
	        <bean class="com.wffanshao.interceptor.HandlerInterceptor1"/>  
	    </mvc:interceptor> 
	    <mvc:interceptor>  
	        <mvc:mapping path="/**" />  
	        <bean class="com.wffanshao.interceptor.HandlerInterceptor2"/>  
	    </mvc:interceptor>   
	</mvc:interceptors>  
	-->


</beans>
